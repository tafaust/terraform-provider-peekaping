name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: "1.24.1"
  TERRAFORM_VERSION: "1.7.5"

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest

      - name: Run linters
        run: |
          golangci-lint run --timeout=5m

      - name: Run unit tests
        run: |
          go test ./internal/provider -v -race -coverprofile=coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  acceptance-tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download

      - name: Build provider
        run: |
          go build -o terraform-provider-peekaping

      - name: Run acceptance tests
        env:
          TF_ACC: 1
          PEEKAPING_API_URL: ${{ secrets.PEEKAPING_API_URL }}
          PEEKAPING_API_TOKEN: ${{ secrets.PEEKAPING_API_TOKEN }}
        run: |
          if [ -n "$PEEKAPING_API_URL" ] && [ -n "$PEEKAPING_API_TOKEN" ]; then
            go test ./internal/provider -v -timeout 30m -parallel 4
          else
            echo "Skipping acceptance tests - credentials not provided"
          fi

  terraform-native-tests:
    name: Terraform Native Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download

      - name: Build provider
        run: |
          go build -o terraform-provider-peekaping

      - name: Set up provider for local development
        run: |
          mkdir -p ~/.terraform.d/plugins/registry.terraform.io/tafaust/peekaping/0.1.0/linux_amd64
          cp terraform-provider-peekaping ~/.terraform.d/plugins/registry.terraform.io/tafaust/peekaping/0.1.0/linux_amd64/

      - name: Initialize Terraform
        run: |
          cd tests
          terraform init

      - name: Run Terraform native tests
        env:
          PEEKAPING_API_URL: ${{ secrets.PEEKAPING_API_URL }}
          PEEKAPING_API_TOKEN: ${{ secrets.PEEKAPING_API_TOKEN }}
        run: |
          cd tests
          if [ -n "$PEEKAPING_API_URL" ] && [ -n "$PEEKAPING_API_TOKEN" ]; then
            terraform test
          else
            echo "Skipping Terraform native tests - credentials not provided"
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Gosec
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Run Gosec Security Scanner
        run: |
          gosec -fmt sarif -out results.sarif ./...

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [unit-tests, security-scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for multiple platforms
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 go build -o dist/terraform-provider-peekaping_linux_amd64
          GOOS=darwin GOARCH=amd64 go build -o dist/terraform-provider-peekaping_darwin_amd64
          GOOS=windows GOARCH=amd64 go build -o dist/terraform-provider-peekaping_windows_amd64.exe

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: terraform-provider-peekaping-binaries
          path: dist/
